# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12m_ZV2fgghId-mcO8zduV3NvGpbE86qW
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#loading the dataset to a pandas df
dia_dataset=pd.read_csv('/content/diabetes.csv')

dia_dataset.head()

dia_dataset.shape

dia_dataset.describe()

dia_dataset['Outcome'].value_counts()

dia_dataset.groupby('Outcome').mean()

#separating data and labels
X=dia_dataset.drop(columns='Outcome',axis=1)
Y=dia_dataset['Outcome']



"""Data Standardization

"""

scaler=StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X=standardized_data
Y=dia_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""
Training the model


"""

classifier = svm.SVC(kernel='linear')

#Training the Support Vector Machine Classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation
Accuracy
"""

X_train_prediction = classifier.predict(X_train)
training_data_acc = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_acc)

X_test_prediction = classifier.predict(X_test)
test_data_acc = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_acc)

"""Prediction"""

#input_data=(1,85,66,29,0,26.6,0.351,31)
input_data=(5,166,72,19,175,25.8,0.587,51)
data_num_arr=np.asarray(input_data)
data_reshape=data_num_arr.reshape(1,-1)
std_data = scaler.transform(data_reshape)

pred=classifier.predict(std_data)
print(pred)

if(pred[0]==0):
  print('The person is not diabetic.')
else:
  print('The person is diabetic.')

